'use client'
import { useState } from "react";

import Link from 'next/link'
import {usePathname} from 'next/navigation'
import * as React from 'react'
import {ReactNode, Suspense, useEffect, useRef} from 'react'
import toast, {Toaster} from 'react-hot-toast'
import { Menu, X } from "lucide-react";
import {AccountChecker} from '../account/account-ui'
import {ClusterChecker, ClusterUiSelect, ExplorerLink} from '../cluster/cluster-ui'
import {WalletButton} from '../solana/solana-provider'

export function UiLayout({ children, links }: { children: ReactNode; links: { label: string; path: string }[] }) {
  const pathname = usePathname()
  const [menuOpen, setMenuOpen] = useState(false);
  return (
    <div className="h-full min-h-screen flex flex-col text-white bg-black">
    {/* Navbar */}
    <div className="navbar bg-gray-800 dark:text-neutral-content px-4 md:px-8 py-3 shadow-lg flex justify-between items-center">
      {/* Logo */}
      <Link className="text-2xl font-bold text-purple-300 hover:text-purple-400 transition duration-300" href="/">
        Voting
      </Link>

      {/* Desktop Menu */}
      <ul className="hidden md:flex space-x-6">
        {links.map(({ label, path }) => (
          <li key={path} className="relative group">
            <Link
              className={`px-3 py-1 text-lg font-medium transition-all duration-300 ${
                pathname.startsWith(path) ? "text-purple-400" : "text-gray-300 hover:text-purple-300"
              }`}
              href={path}
            >
              {label}
              {/* Hover Underline Animation */}
              <span className="absolute left-0 bottom-0 w-full h-0.5 bg-purple-400 scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left"></span>
            </Link>
          </li>
        ))}
      </ul>

      {/* Wallet & Cluster Select - Desktop */}
      <div className="hidden md:flex space-x-3">
        <WalletButton />
        <ClusterUiSelect />
      </div>

      {/* Mobile Menu Button */}
      <button className="md:hidden text-gray-300 hover:text-purple-400 transition" onClick={() => setMenuOpen(!menuOpen)}>
        {menuOpen ? <X size={28} /> : <Menu size={28} />}
      </button>
    </div>

    {/* Mobile Menu */}
    {menuOpen && (
      <div className="md:hidden bg-gray-800 text-white flex flex-col items-center py-4 space-y-4 shadow-lg">
        {links.map(({ label, path }) => (
          <Link
            key={path}
            className="text-lg font-medium hover:text-purple-400 transition duration-300"
            href={path}
            onClick={() => setMenuOpen(false)}
          >
            {label}
          </Link>
        ))}
        <WalletButton />
        <ClusterUiSelect />
      </div>
    )}

    {/* Content Wrapper */}
    <ClusterChecker>
      <AccountChecker />
    </ClusterChecker>
    <div className="flex-grow mx-4 lg:mx-auto">
      <Suspense
        fallback={
          <div className="text-center my-32">
            <span className="loading loading-spinner loading-lg"></span>
          </div>
        }
      >
        {children}
      </Suspense>
      <Toaster position="bottom-right" />
    </div>

    {/* Footer */}
    <footer className="footer footer-left p-4  bg-gray-950 text-grey mt-8 ">
      <aside>
        <p>
          Generated by{" "}
          <a
            className="link hover:text-purple-300 transition duration-300"
            href="https://github.com/solana-developers/create-solana-dapp"
            target="_blank"
            rel="noopener noreferrer"
          >
            create-solana-dapp
          </a>
        </p>
      </aside>
    </footer>
  </div>
  )
}

export function AppModal({
  children,
  title,
  hide,
  show,
  submit,
  submitDisabled,
  submitLabel,
}: {
  children: ReactNode
  title: string
  hide: () => void
  show: boolean
  submit?: () => void
  submitDisabled?: boolean
  submitLabel?: string
}) {
  const dialogRef = useRef<HTMLDialogElement | null>(null)

  useEffect(() => {
    if (!dialogRef.current) return
    if (show) {
      dialogRef.current.showModal()
    } else {
      dialogRef.current.close()
    }
  }, [show, dialogRef])

  return (
    <dialog className="modal" ref={dialogRef}>
      <div className="modal-box space-y-5">
        <h3 className="font-bold text-lg">{title}</h3>
        {children}
        <div className="modal-action">
          <div className="join space-x-2">
            {submit ? (
              <button className="btn btn-xs lg:btn-md btn-primary" onClick={submit} disabled={submitDisabled}>
                {submitLabel || 'Save'}
              </button>
            ) : null}
            <button onClick={hide} className="btn">
              Close
            </button>
          </div>
        </div>
      </div>
    </dialog>
  )
}

export function AppHero({
  children,
  title,
  subtitle,
}: {
  children?: ReactNode
  title: ReactNode
  subtitle: ReactNode
}) {
  return (
    <div className="hero py-[64px]">
      <div className="hero-content text-center">
        <div className="max-w-2xl">
          {typeof title === 'string' ? <h1 className="text-5xl font-bold">{title}</h1> : title}
          {typeof subtitle === 'string' ? <p className="py-6">{subtitle}</p> : subtitle}
          {children}
        </div>
      </div>
    </div>
  )
}

export function ellipsify(str = '', len = 4) {
  if (str.length > 30) {
    return str.substring(0, len) + '..' + str.substring(str.length - len, str.length)
  }
  return str
}

export function useTransactionToast() {
  return (signature: string) => {
    toast.success(
      <div className={'text-center'}>
        <div className="text-lg">Transaction sent</div>
        <ExplorerLink path={`tx/${signature}`} label={'View Transaction'} className="btn btn-xs btn-primary" />
      </div>,
    )
  }
}
